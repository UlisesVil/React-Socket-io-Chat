{"version":3,"sources":["hooks/useLocalStorage.js","components/Login.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/OpenConversation.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/Dashboard.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","clear","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","withCredentials","query","console","log","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","r","InputGroup","as","onChange","target","resize","Append","Conversations","ListGroup","Item","action","active","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","ModalOpen","setModalOpen","conversationsOpen","display","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","Dashboard","sideBarContainer","document","getElementById","openMenu","position","App","setId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.74f4a0b4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst PREFIX = 'React-Socket-Chat';\r\nexport default function useLocalStorage(key, initialValue) {\r\n\r\n    const prefixedKey = PREFIX + key;\r\n    const [value, setValue] = useState(()=>{\r\n        const jsonValue = localStorage.getItem(prefixedKey);\r\n        if(jsonValue !=null) return JSON.parse(jsonValue);\r\n        if(typeof initialValue === 'function'){\r\n            return initialValue();\r\n        }else{\r\n            return initialValue\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }, [prefixedKey,value]);\r\n\r\n    return [value, setValue];\r\n\r\n\r\n\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\nimport { v4 as uuidV4 } from 'uuid';\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n    const idRef = useRef();\r\n    \r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        onIdSubmit(idRef.current.value);\r\n    }\r\n\r\n    function createNewId(){\r\n        onIdSubmit(uuidV4());\r\n    }\r\n\r\n    function eraseLocalStorage(){\r\n        localStorage.clear();\r\n    }\r\n\r\n    return (\r\n        <Container className=\"align-items-center d-flex\" style={{ height: '100vh'}}>\r\n            <Form onSubmit={handleSubmit} className=\"w-100 loginForm\">\r\n                <Form.Group>\r\n                    <Form.Label>\r\n                        <p className=\"loginText text-white\">- Enter your 10 Digit Phone Number</p>\r\n                        <p className=\"loginText text-white\">- Or Generate a Random ID</p>\r\n                    </Form.Label>\r\n                    <Form.Control type=\"text\" ref={idRef} required/>\r\n                </Form.Group>\r\n                <Button type=\"submit\" className=\"mr-2 btnCreate\">Login</Button>\r\n                <Button onClick={createNewId} variant=\"secondary\" >Create a new ID</Button>\r\n                <Button onClick={() => eraseLocalStorage()} className=\"rounded-1 modalButton\">\r\n                    Borrame\r\n                </Button>\r\n            </Form>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ContactsContext= React.createContext();\r\n\r\nexport function useContacts(){\r\n    return useContext(ContactsContext);\r\n};\r\n\r\nexport function ContactsProvider({ children }) {\r\n    const [contacts, setContacts] = useLocalStorage('contacts', []);\r\n\r\n    function createContact(id, name){\r\n        setContacts(prevContacts => {\r\n            return[...prevContacts, {id, name}];\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <ContactsContext.Provider value={{ contacts, createContact }}>\r\n            {children}\r\n        </ContactsContext.Provider>   \r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket(){\r\n    return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n    const [socket, setSocket] = useState();\r\n    \r\n    useEffect(()=>{\r\n        const newSocket = io(\r\n            'https://ulisesv-react-chat-webapp.herokuapp.com',\r\n            {\r\n                withCredentials: false,\r\n                query: { id }\r\n            }\r\n        );\r\n        setSocket(newSocket);\r\n\r\n        console.log(newSocket);\r\n        return () => newSocket.close();\r\n    },[id]);\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={ socket }>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n//'http://localhost:5000',\r\n//'https://ulisesv-react-chat-webapp.herokuapp.com',","import React, { useContext, useState, useEffect, useCallback } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts} from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext= React.createContext();\r\n\r\nexport function useConversations(){\r\n    return useContext(ConversationsContext);\r\n};\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n    const { contacts } = useContacts();\r\n    const socket = useSocket();\r\n\r\n    function createConversation(recipients){\r\n        setConversations(prevConversations => {\r\n            return[...prevConversations, { recipients, messages:[] }];\r\n        });\r\n\r\n    }\r\n\r\n    const addMessageToConversation= useCallback(({ recipients, text, sender })=>{\r\n        setConversations(prevConversations => {\r\n            let madeChange = false;\r\n            const newMessage = { sender , text };\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if(arrayEquality(conversation.recipients, recipients)){\r\n                    madeChange = true;\r\n                    return {\r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n\r\n                return conversation;\r\n            });\r\n\r\n            if(madeChange){\r\n                return newConversations;\r\n            }else{\r\n                return [\r\n                    ...prevConversations, \r\n                    { recipients, messages:[newMessage] }\r\n                ];\r\n            }\r\n        });\r\n    }, [setConversations]);\r\n\r\n    useEffect(()=>{\r\n        if(socket == null) return\r\n\r\n        socket.on('receive-message', addMessageToConversation);\r\n\r\n        return () => socket.off('receive-message');\r\n    },[socket, addMessageToConversation]);\r\n\r\n    function sendMessage(recipients, text){\r\n        socket.emit('send-message', {recipients, text});\r\n\r\n        addMessageToConversation({ recipients, text, sender: id });\r\n    }\r\n\r\n    const formattedConversations = conversations.map((conversation, index) => {\r\n        const recipients = conversation.recipients.map(recipient =>{\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient;\r\n            });\r\n            const name = (contact && contact.name) || recipient;\r\n            return { id: recipient, name }\r\n        });\r\n\r\n        const messages = conversation.messages.map(message => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === message.sender;\r\n            });\r\n            const name = (contact && contact.name) || message.sender;\r\n            const fromMe = id === message.sender;\r\n            return { ...message, senderName: name, fromMe};\r\n        });\r\n\r\n        const selected = index === selectedConversationIndex;\r\n        return { ...conversation, messages, recipients, selected};\r\n    });\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectedConversation: formattedConversations[selectedConversationIndex],\r\n        sendMessage,\r\n        selectConversationIndex:  setSelectedConversationIndex, createConversation\r\n    };\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={ value }>\r\n            {children}\r\n        </ConversationsContext.Provider>   \r\n    );\r\n\r\n   \r\n}\r\n\r\n\r\nfunction arrayEquality(a, b){\r\n    if(a.length !== b.length) return false;\r\n\r\n    a.sort();\r\n    b.sort();\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index];\r\n    });\r\n}","import React, {useState, useCallback} from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\n\r\nexport default function OpenConversation() {\r\nconst [text, setText] = useState('');\r\nconst setRef = useCallback(node => {\r\n    if(node){\r\n        node.scrollIntoView({ smooth: true });\r\n    }\r\n},[]);\r\nconst { sendMessage, selectedConversation} = useConversations();\r\n\r\nfunction handleSubmit(e){\r\n    e.preventDefault();\r\n\r\n    sendMessage( \r\n        selectedConversation.recipients.map(r => r.id),text\r\n    );\r\n    setText(''); \r\n\r\n}\r\n\r\n\r\n\r\n    return (\r\n       \r\n        <div className=\"d-flex flex-column flex-grow-1 conversationMain\">\r\n            \r\n            <div className=\"flex-grow-1 overflow-auto\">\r\n                <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n               \r\n                    {selectedConversation.messages.map((message, index)=> {\r\n                        \r\n                        const lastMessage = selectedConversation.messages.length -1 === index;\r\n                        return(\r\n                            \r\n                            <div \r\n                                ref={ lastMessage ? setRef : null }\r\n                                key={ index }\r\n                                className={`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\r\n                            >\r\n                                \r\n                                <div className={`rounded px-2 py-1 ${message.fromMe ? 'forMe' : 'notForMe'}`}>\r\n                                    {message.text}\r\n                                </div>\r\n                                <div className={`userReference small ${message.fromMe ? 'text-right mr-2' : 'ml-2'}`}>\r\n                                    {message.fromMe ? 'You' : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                            \r\n                          \r\n                        )\r\n                    })}\r\n                   \r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"m-2\">\r\n                    <InputGroup>\r\n                        <Form.Control \r\n                            as=\"textarea\" \r\n                            required \r\n                            value={text}\r\n                            onChange={e => setText(e.target.value) }\r\n                            style={{ height: '75px', resize: 'none'}}\r\n                            className=\"textArea\"\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\" className=\"sendMessage\">\r\n                                Send <i className=\"far fa-arrow-alt-circle-right\"></i>\r\n                                </Button>      \r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\nimport '../assets/css/conversations.css';\r\n\r\nexport default function Conversations() {\r\n    const { conversations, selectConversationIndex } = useConversations();\r\n\r\n    return (\r\n        <ListGroup variant='flush'>\r\n        {conversations.map((conversation, index)=>(\r\n            <ListGroup.Item \r\n                key={index}\r\n                action\r\n                onClick={()=> selectConversationIndex(index)}\r\n                active={ conversation.selected}\r\n            >\r\n                {conversation.recipients.map(r => r.name).join(', ')}\r\n            </ListGroup.Item>\r\n        ))}\r\n    </ListGroup>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\n\r\nexport default function Contacts() {\r\n    const { contacts } = useContacts();\r\n\r\n    return (\r\n        <ListGroup variant='flush' className=\"contact\">\r\n            {contacts.map(contact =>(\r\n                <ListGroup.Item key={contact.id} className=\"contact\">\r\n                    <p className=\"contactLine\">{contact.name}</p> <p className=\"contactLine id\">{contact.id}</p>\r\n                </ListGroup.Item>\r\n            ))}\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React,  { useRef } from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\nimport '../assets/css/modals.css';\r\n\r\nexport default function NewContactModal({ closeModal}) {\r\nconst idRef = useRef();\r\nconst nameRef = useRef();\r\nconst { createContact } = useContacts();\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        createContact(idRef.current.value, nameRef.current.value);\r\n        closeModal();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Contact</Modal.Header>  \r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control type=\"text\" ref={idRef} required />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type=\"text\" ref={nameRef} required />\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" className=\"btnCreate\">Create</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n    const [selectedContactIds, setSelectedContactIds]= useState([]);\r\n    const { contacts } = useContacts();\r\n    const { createConversation } = useConversations();\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        \r\n        createConversation(selectedContactIds);\r\n        closeModal();\r\n    }\r\n\r\n    function handleCheckboxChange(contactId){\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if(prevSelectedContactIds.includes(contactId)){\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prevId\r\n                });\r\n            }else{\r\n                return [...prevSelectedContactIds, contactId];\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n       \r\n          <Modal.Header closeButton>Create Conversation</Modal.Header>  \r\n          <Modal.Body>\r\n              <Form onSubmit={handleSubmit}>\r\n                 {contacts.map(contact => (\r\n                     <Form.Group controlId={contact.id} key={contact.id}>\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            value={selectedContactIds.includes(contact.id)}\r\n                            label={contact.name}\r\n                            onChange={()=> handleCheckboxChange(contact.id)}\r\n             />\r\n                     </Form.Group>\r\n                 ))}\r\n                  <Button type=\"submit\" className=\"btnCreate\">Create</Button>\r\n              </Form>\r\n          </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Tab, Nav, Button, Modal} from 'react-bootstrap';\r\nimport Conversations from './Conversations';\r\nimport Contacts from './Contacts';\r\nimport '../assets/css/sideBar.css';\r\n\r\nimport NewContactModal from './NewContactModal';\r\nimport NewConversationModal from './NewConversationModal';\r\n\r\nconst CONVERSATIONS_KEY = 'conversations';\r\nconst CONTACTS_KEY = 'contacts';\r\n\r\nexport default function Sidebar({id}) {\r\n    const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\r\n    const [ModalOpen, setModalOpen] = useState(false);\r\n    const conversationsOpen = activeKey === CONVERSATIONS_KEY;\r\n\r\n    function closeModal(){\r\n        setModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div id=\"sideBarContainer\" className=\"flex-column sideBarContainer\" style={{display:'flex'}}>\r\n            <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n                <Nav variant=\"tabs\" className=\"justify-content-left\">\r\n                    <Nav.Item>\r\n                        <Nav.Link className=\"activeTab\" eventKey={ CONVERSATIONS_KEY }>Conversations</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link className=\"disableTab\" eventKey={ CONTACTS_KEY }>Contacts</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n\r\n                <Tab.Content className=\"overflow-auto flex-grow-1\">\r\n                    <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                        <Conversations />\r\n                    </Tab.Pane>\r\n                    <Tab.Pane eventKey={CONTACTS_KEY} className=\"contact\">\r\n                        <Contacts />\r\n                    </Tab.Pane>\r\n                </Tab.Content>\r\n                <div className=\"p-2 small\">\r\n                    Your Id: <span className=\"text-white\"> {id}</span>\r\n                </div>\r\n                <Button onClick={() => setModalOpen(true)} className=\"rounded-1 modalButton\">\r\n                    New { conversationsOpen ? 'Conversation' : 'Contact'}\r\n                </Button>\r\n            </Tab.Container>       \r\n\r\n\r\n            <Modal show={ModalOpen} onHide={closeModal}>\r\n                {conversationsOpen ? \r\n                    <NewConversationModal closeModal={closeModal}/> :\r\n                    <NewContactModal closeModal={closeModal} />\r\n                \r\n                }\r\n            </Modal>       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport OpenConversation from './OpenConversation';\r\nimport Sidebar from './Sidebar';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Dashboard({ id }) {\r\n    const { selectedConversation } = useConversations();\r\n\r\n    function openMenu(){\r\n        let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n        console.log(sideBarContainer);\r\n    \r\n        if(sideBarContainer.style.display===\"none\"){\r\n            let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n            sideBarContainer.style.display = \"flex\";\r\n            console.log(sideBarContainer);\r\n            \r\n          \r\n        }else{\r\n            let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n            sideBarContainer.style.display = \"none\";\r\n            console.log(sideBarContainer);\r\n        }\r\n       \r\n    }\r\n\r\n    function eraseLocalStorage(){\r\n        localStorage.clear();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ height: '100vh'}}>\r\n            <div id=\"hamburgerHide\"><i className=\"fas fa-hamburger hamburgerHide\" onClick={() =>openMenu()} style={{display:'none'}}></i></div>\r\n            <div onClick={() => eraseLocalStorage()} className=\"rounded-1 modalButton\" style={{ position: 'fixed'}}>\r\n                Borrame\r\n            </div>\r\n            <Sidebar id = { id } />\r\n            { selectedConversation &&  <OpenConversation /> }\r\n        \r\n        </div>\r\n\r\n   \r\n    )\r\n}\r\n","import React from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Login from './Login';\nimport Dashboard from './Dashboard';\nimport { ContactsProvider } from '../contexts/ContactsProvider';\nimport { ConversationsProvider } from '../contexts/ConversationsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\n\n\nfunction App() {\n  const [id, setId]=useLocalStorage('id');\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return (\n    id ? dashboard : <Login onIdSubmit={setId} />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}