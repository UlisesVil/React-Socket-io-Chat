{"version":3,"sources":["hooks/useLocalStorage.js","components/Login.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/OpenConversation.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/Dashboard.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","window","location","hostname","withCredentials","query","console","log","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","r","InputGroup","as","onChange","target","resize","Append","Conversations","ListGroup","Item","action","active","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","ModalOpen","setModalOpen","conversationsOpen","display","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","Dashboard","addEventListener","document","getElementById","clientWidth","App","setId","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6450e569.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst PREFIX = 'React-Socket-Chat';\r\nexport default function useLocalStorage(key, initialValue) {\r\n\r\n    const prefixedKey = PREFIX + key;\r\n    const [value, setValue] = useState(()=>{\r\n        const jsonValue = localStorage.getItem(prefixedKey);\r\n        if(jsonValue !=null) return JSON.parse(jsonValue);\r\n        if(typeof initialValue === 'function'){\r\n            return initialValue();\r\n        }else{\r\n            return initialValue\r\n        }\r\n    });\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }, [prefixedKey,value]);\r\n\r\n    return [value, setValue];\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\nimport { v4 as uuidV4 } from 'uuid';\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n    const idRef = useRef();\r\n    \r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        onIdSubmit(idRef.current.value);\r\n    }\r\n\r\n    function createNewId(){\r\n        onIdSubmit(uuidV4());\r\n    }\r\n\r\n    return (\r\n        <Container className=\"align-items-center d-flex\" style={{ height: '100vh'}}>\r\n            <Form onSubmit={handleSubmit} className=\"w-100 loginForm\">\r\n                <Form.Group>\r\n                    <Form.Label>\r\n                        <p className=\"loginText text-white\">\r\n                            - Enter your 10 Digit Phone Number\r\n                        </p>\r\n                        <p className=\"loginText text-white\">\r\n                            - Or Generate a Random ID\r\n                        </p>\r\n                    </Form.Label>\r\n                    <Form.Control type=\"text\" ref={idRef} required/>\r\n                </Form.Group>\r\n                <Button type=\"submit\" className=\"mr-2 btnCreate\">\r\n                    Login\r\n                </Button>\r\n                <Button onClick={createNewId} variant=\"secondary\" >\r\n                    Create a new ID\r\n                </Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ContactsContext= React.createContext();\r\n\r\nexport function useContacts(){\r\n    return useContext(ContactsContext);\r\n};\r\n\r\nexport function ContactsProvider({ children }) {\r\n    const [contacts, setContacts] = useLocalStorage('contacts', []);\r\n\r\n    function createContact(id, name){\r\n        setContacts(prevContacts => {\r\n            return[...prevContacts, {id, name}];\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ContactsContext.Provider value={{ contacts, createContact }}>\r\n            {children}\r\n        </ContactsContext.Provider>   \r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket(){\r\n    return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n    \r\n    const [socket, setSocket] = useState();\r\n\r\n    function connectTo(){\r\n        var origin= window.location.hostname;\r\n        if(origin==='localhost'){\r\n            return 'http://localhost:5000';\r\n        }else{\r\n            return 'https://ulisesv-react-chat-webapp.herokuapp.com';\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const newSocket = io(\r\n            connectTo(),\r\n            {\r\n                withCredentials: false,\r\n                query: { id }\r\n            }\r\n        );\r\n        setSocket(newSocket);\r\n\r\n        console.log(newSocket);\r\n        return () => newSocket.close();\r\n    },[id]);\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={ socket }>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}","import React, { useContext, useState, useEffect, useCallback } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useContacts} from './ContactsProvider';\r\nimport { useSocket } from './SocketProvider';\r\n\r\nconst ConversationsContext= React.createContext();\r\n\r\nexport function useConversations(){\r\n    return useContext(ConversationsContext);\r\n};\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n    const { contacts } = useContacts();\r\n    const socket = useSocket();\r\n\r\n    function createConversation(recipients){\r\n        setConversations(prevConversations => {\r\n            return[...prevConversations, { recipients, messages:[] }];\r\n        });\r\n    }\r\n\r\n    const addMessageToConversation= useCallback(({ recipients, text, sender })=>{\r\n        setConversations(prevConversations => {\r\n            let madeChange = false;\r\n            const newMessage = { sender , text };\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if(arrayEquality(conversation.recipients, recipients)){\r\n                    madeChange = true;\r\n                    return {\r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n                return conversation;\r\n            });\r\n\r\n            if(madeChange){\r\n                return newConversations;\r\n            }else{\r\n                return [\r\n                    ...prevConversations, \r\n                    { recipients, messages:[newMessage] }\r\n                ];\r\n            }\r\n        });\r\n    }, [setConversations]);\r\n\r\n    useEffect(()=>{\r\n        if(socket == null) return\r\n        socket.on('receive-message', addMessageToConversation);\r\n        return () => socket.off('receive-message');\r\n    },[socket, addMessageToConversation]);\r\n\r\n    function sendMessage(recipients, text){\r\n        socket.emit('send-message', {recipients, text});\r\n        addMessageToConversation({ recipients, text, sender: id });\r\n    }\r\n\r\n    const formattedConversations = conversations.map((conversation, index) => {\r\n        const recipients = conversation.recipients.map(recipient =>{\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient;\r\n            });\r\n            const name = (contact && contact.name) || recipient;\r\n            return { id: recipient, name }\r\n        });\r\n\r\n        const messages = conversation.messages.map(message => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === message.sender;\r\n            });\r\n            const name = (contact && contact.name) || message.sender;\r\n            const fromMe = id === message.sender;\r\n            return { ...message, senderName: name, fromMe};\r\n        });\r\n\r\n        const selected = index === selectedConversationIndex;\r\n        return { ...conversation, messages, recipients, selected};\r\n    });\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        selectedConversation: formattedConversations[selectedConversationIndex],\r\n        sendMessage,\r\n        selectConversationIndex:  setSelectedConversationIndex, createConversation\r\n    };\r\n\r\n    return (\r\n        <ConversationsContext.Provider value={ value }>\r\n            {children}\r\n        </ConversationsContext.Provider>   \r\n    );\r\n}\r\n\r\nfunction arrayEquality(a, b){\r\n    if(a.length !== b.length) return false;\r\n\r\n    a.sort();\r\n    b.sort();\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index];\r\n    });\r\n}","import React, {useState, useCallback} from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function OpenConversation() {\r\n    const [text, setText] = useState('');\r\n    const setRef = useCallback(node => {\r\n        if(node){\r\n            node.scrollIntoView({ smooth: true });\r\n        }\r\n    },[]);\r\n    const { sendMessage, selectedConversation} = useConversations();\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        sendMessage( \r\n            selectedConversation.recipients.map(r => r.id),text\r\n        );\r\n        setText(''); \r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column flex-grow-1 conversationMain\">\r\n            <div className=\"flex-grow-1 overflow-auto subconversation\">\r\n                <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n                    {selectedConversation.messages.map((message, index)=> {  \r\n                        const lastMessage = selectedConversation.messages.length -1 === index;\r\n                        return(\r\n                            <div \r\n                                ref={ lastMessage ? setRef : null }\r\n                                key={ index }\r\n                                className={`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}\r\n                            >   \r\n                                <div className={`rounded px-2 py-1 ${message.fromMe ? 'forMe' : 'notForMe'}`}>\r\n                                    {message.text}\r\n                                </div>\r\n                                <div className={`userReference small ${message.fromMe ? 'text-right mr-2' : 'ml-2'}`}>\r\n                                    {message.fromMe ? 'You' : message.senderName}\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        \r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group>\r\n                    <InputGroup>\r\n                        <Form.Control \r\n                            as=\"textarea\" \r\n                            required \r\n                            value={text}\r\n                            onChange={e => setText(e.target.value) }\r\n                            style={{ height: '75px', resize: 'none'}}\r\n                            className=\"textArea\"\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button type=\"submit\" className=\"sendMessage\">\r\n                                Send <i className=\"far fa-arrow-alt-circle-right\"></i>\r\n                            </Button>      \r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\nimport '../assets/css/conversations.css';\r\n\r\nexport default function Conversations() {\r\n    \r\n    const { conversations, selectConversationIndex } = useConversations();\r\n\r\n    return (\r\n        <ListGroup variant='flush'>\r\n        {conversations.map((conversation, index)=>(\r\n            <ListGroup.Item \r\n                key={index}\r\n                action\r\n                onClick={()=> selectConversationIndex(index)}\r\n                active={ conversation.selected}\r\n            >\r\n                {conversation.recipients.map(r => r.name).join(', ')}\r\n            </ListGroup.Item>\r\n        ))}\r\n    </ListGroup>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\n\r\nexport default function Contacts() {\r\n    const { contacts } = useContacts();\r\n\r\n    return (\r\n        <ListGroup variant='flush' className=\"contact\">\r\n            {contacts.map(contact =>(\r\n                <ListGroup.Item key={contact.id} className=\"contact\">\r\n                    <p className=\"contactLine\">\r\n                        {contact.name}\r\n                    </p> \r\n                    <p className=\"contactLine id\">\r\n                        {contact.id}\r\n                    </p>\r\n                </ListGroup.Item>\r\n            ))}\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React,  { useRef } from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\nimport '../assets/css/modals.css';\r\n\r\nexport default function NewContactModal({ closeModal}) {\r\nconst idRef = useRef();\r\nconst nameRef = useRef();\r\nconst { createContact } = useContacts();\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        createContact(idRef.current.value, nameRef.current.value);\r\n        closeModal();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                Create Contact\r\n            </Modal.Header>  \r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Id\r\n                        </Form.Label>\r\n                        <Form.Control type=\"text\" ref={idRef} required />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Name\r\n                        </Form.Label>\r\n                        <Form.Control type=\"text\" ref={nameRef} required />\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" className=\"btnCreate\">\r\n                        Create\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\nimport { useContacts } from '../contexts/ContactsProvider';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n    const [selectedContactIds, setSelectedContactIds]= useState([]);\r\n    const { contacts } = useContacts();\r\n    const { createConversation } = useConversations();\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        createConversation(selectedContactIds);\r\n        closeModal();\r\n    }\r\n\r\n    function handleCheckboxChange(contactId){\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if(prevSelectedContactIds.includes(contactId)){\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prevId\r\n                });\r\n            }else{\r\n                return [...prevSelectedContactIds, contactId];\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                Create Conversation\r\n            </Modal.Header>  \r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    {contacts.map(contact => (\r\n                        <Form.Group controlId={contact.id} key={contact.id}>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                value={selectedContactIds.includes(contact.id)}\r\n                                label={contact.name}\r\n                                onChange={()=> handleCheckboxChange(contact.id)}\r\n                            />\r\n                        </Form.Group>\r\n                    ))}\r\n                    <Button type=\"submit\" className=\"btnCreate\">\r\n                        Create\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Tab, Nav, Button, Modal} from 'react-bootstrap';\r\nimport Conversations from './Conversations';\r\nimport Contacts from './Contacts';\r\nimport '../assets/css/sideBar.css';\r\n\r\nimport NewContactModal from './NewContactModal';\r\nimport NewConversationModal from './NewConversationModal';\r\n\r\nconst CONVERSATIONS_KEY = 'conversations';\r\nconst CONTACTS_KEY = 'contacts';\r\n\r\nexport default function Sidebar({id}) {\r\n    const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\r\n    const [ModalOpen, setModalOpen] = useState(false);\r\n    const conversationsOpen = activeKey === CONVERSATIONS_KEY;\r\n\r\n    function closeModal(){\r\n        setModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div id=\"sideBarContainer\" className=\"flex-column sideBarContainer\" style={{display:'flex'}}>\r\n            <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n                <Nav variant=\"tabs\" className=\"justify-content-left\">\r\n                    <Nav.Item>\r\n                        <Nav.Link className=\"activeTab\" eventKey={ CONVERSATIONS_KEY }>Conversations</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link className=\"disableTab\" eventKey={ CONTACTS_KEY }>Contacts</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n\r\n                <Tab.Content className=\"overflow-auto flex-grow-1\">\r\n                    <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                        <Conversations />\r\n                    </Tab.Pane>\r\n                    <Tab.Pane eventKey={CONTACTS_KEY} className=\"contact\">\r\n                        <Contacts />\r\n                    </Tab.Pane>\r\n                </Tab.Content>\r\n                <div className=\"p-2 small\">\r\n                    Your Id: \r\n                    <span className=\"text-white\"> \r\n                        {id}\r\n                    </span>\r\n                </div>\r\n                <Button onClick={() => setModalOpen(true)} className=\"rounded-1 modalButton\">\r\n                    New { conversationsOpen ? 'Conversation' : 'Contact'}\r\n                </Button>\r\n            </Tab.Container>       \r\n\r\n            <Modal show={ModalOpen} onHide={closeModal}>\r\n                {conversationsOpen ? \r\n                    <NewConversationModal closeModal={closeModal}/> :\r\n                    <NewContactModal closeModal={closeModal} />\r\n                }\r\n            </Modal>       \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport OpenConversation from './OpenConversation';\r\nimport Sidebar from './Sidebar';\r\nimport { useConversations } from '../contexts/ConversationsProvider';\r\n\r\nexport default function Dashboard({ id }) {\r\n    const { selectedConversation } = useConversations();\r\n\r\n    function openMenu(){\r\n        let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n    \r\n        if(sideBarContainer.style.display===\"none\"){\r\n            let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n            sideBarContainer.style.display = \"flex\";\r\n        }else{\r\n            let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n            sideBarContainer.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    function sidebarShowHide(){\r\n        let variableWidth = document.getElementById('root').clientWidth;\r\n        if(variableWidth>770){\r\n            let sideBarContainer=document.getElementById(\"sideBarContainer\");\r\n            sideBarContainer.style.display = \"flex\";\r\n        }\r\n    }\r\n    window.addEventListener('resize',sidebarShowHide);\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ height: '100vh'}}>\r\n            <div id=\"hamburgerHide\">\r\n                <i className=\"fas fa-hamburger hamburgerHide\" onClick={() =>openMenu()} style={{display:'none'}}>\r\n                </i>\r\n            </div>\r\n            <Sidebar id = { id } />\r\n            { selectedConversation &&  <OpenConversation /> }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Login from './Login';\nimport Dashboard from './Dashboard';\nimport { ContactsProvider } from '../contexts/ContactsProvider';\nimport { ConversationsProvider } from '../contexts/ConversationsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\n\n\nfunction App() {\n  const [id, setId]=useLocalStorage('id');\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n\n  return (\n    id ? dashboard : <Login onIdSubmit={setId} />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}